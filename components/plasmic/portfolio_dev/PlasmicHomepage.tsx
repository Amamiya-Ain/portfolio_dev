/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 28mkbvcnJxn1WuXGx7J8H7
// Component: ka8Kr4Bgr7Pv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 28mkbvcnJxn1WuXGx7J8H7/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 28mkbvcnJxn1WuXGx7J8H7/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 28mkbvcnJxn1WuXGx7J8H7/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: ka8Kr4Bgr7Pv/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  home?: Flex__<"div">;
  home2?: Flex__<"section">;
  h1?: Flex__<"h1">;
  text?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.home
          )}
        >
          <section
            data-plasmic-name={"home2"}
            data-plasmic-override={overrides.home2}
            className={classNames(projectcss.all, sty.home2)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {
                "Kyushu Univ. Grad School M1\r\nCompetitive Programming & Game Dev Enthusiast\r"
              }
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u4e5d\u5dde\u5927\u5b66\u5927\u5b66\u9662 \u30b7\u30b9\u30c6\u30e0\u60c5\u5831\u79d1\u5b66\u5e9c M1"
                  }
                </span>
                <React.Fragment>
                  {
                    "\nC\u8a00\u8a9e\u3092\u8ef8\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3073\u306a\u304c\u3089\u3001\u30b2\u30fc\u30e0\u5236\u4f5c\u3084Web\u958b\u767a\u306b\u3082\u53d6\u308a\u7d44\u3093\u3067\u3044\u307e\u3059\u3002\n\u77ed\u671f\u9593\u3067\u306e\u958b\u767a\u3084\u65b0\u3057\u3044\u6280\u8853\u3078\u306e\u6311\u6226\u3092\u901a\u3058\u3066\u3001\u5b9f\u88c5\u529b\u3068\u554f\u984c\u89e3\u6c7a\u529b\u3092\u78e8\u3044\u3066\u3044\u307e\u3059\u3002\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u4ee3\u8868\u30d7\u30ed\u30b8\u30a7\u30af\u30c8"}
                </span>
                <React.Fragment>
                  {
                    "\n\u30fb\u30b2\u30fc\u30e0\u4f5c\u54c1\u300cProject V\u300d\n\u3000\u500b\u4eba\u3067\u4f01\u753b\u30fb\u958b\u767a\u3057\u305f2D\u30b2\u30fc\u30e0\u3002\u30b2\u30fc\u30e0\u5236\u4f5c\u306e\u904e\u7a0b\u3067\u8a2d\u8a08\u30fbUI\u30fb\u5b9f\u88c5\u3092\u4e00\u8cab\u3057\u3066\u62c5\u5f53\u3002\n\u30fb\u30dd\u30fc\u30ab\u30fcAI\uff081Week\u30aa\u30f3\u30e9\u30a4\u30f3\u30cf\u30c3\u30ab\u30bd\u30f3\uff09\n\u3000\u6226\u7565\u8a2d\u8a08\u3068\u7d71\u5408\u3092\u4e3b\u5c0e\u3057\u3001\u5b89\u5b9a\u3057\u305f\u52dd\u7387\u3092\u5b9f\u73fe\u30022\u4f4d\uff0b\u30aa\u30fc\u30c7\u30a3\u30a8\u30f3\u30b9\u8cde\u3092\u7372\u5f97\u3002\n\n"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"\u5b9f\u7e3e\u30fb\u30b9\u30ad\u30eb"}
                </span>
                <React.Fragment>
                  {
                    "\n\u30fbAtCoder \u7dd1\uff08Algorithm / Heuristic\uff09\n\u30fb\u8cc7\u683c\uff1aIT\u30d1\u30b9\u30dd\u30fc\u30c8\u3001\u57fa\u672c\u60c5\u5831\u6280\u8853\u8005\u3001\u5fdc\u7528\u60c5\u5831\u6280\u8853\u8005\u3001PAST(\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5b9f\u6280\u691c\u5b9a)\u4e2d\u7d1a\n\u30fb\u60c5\u5831\u51e6\u7406\u5b89\u5168\u78ba\u4fdd\u652f\u63f4\u58eb\u8a66\u9a13 \u53d7\u9a13\u4e88\u5b9a"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__rwYm3)}>
            <div className={classNames(projectcss.all, sty.freeBox__pow7O)}>
              <div className={classNames(projectcss.all, sty.freeBox__ljEGz)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__sHtj
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage2"] = true
                      ? (() => {
                          const actionArgs = { destination: `/About` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage2"] != null &&
                      typeof $steps["goToHomepage2"] === "object" &&
                      typeof $steps["goToHomepage2"].then === "function"
                    ) {
                      $steps["goToHomepage2"] = await $steps["goToHomepage2"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__eEuEo
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage3"] = true
                      ? (() => {
                          const actionArgs = { destination: `/Projects` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage3"] != null &&
                      typeof $steps["goToHomepage3"] === "object" &&
                      typeof $steps["goToHomepage3"].then === "function"
                    ) {
                      $steps["goToHomepage3"] = await $steps["goToHomepage3"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"Projects"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__uf2Sl
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage4"] = true
                      ? (() => {
                          const actionArgs = { destination: `/Achievements` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage4"] != null &&
                      typeof $steps["goToHomepage4"] === "object" &&
                      typeof $steps["goToHomepage4"].then === "function"
                    ) {
                      $steps["goToHomepage4"] = await $steps["goToHomepage4"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"Achievements"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__yb5Uj
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage5"] = true
                      ? (() => {
                          const actionArgs = { destination: `/Blog` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage5"] != null &&
                      typeof $steps["goToHomepage5"] === "object" &&
                      typeof $steps["goToHomepage5"].then === "function"
                    ) {
                      $steps["goToHomepage5"] = await $steps["goToHomepage5"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"Blog"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__hJsJr
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"TOP"}
                </PlasmicLink__>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: ["home", "home2", "h1", "text"],
  home2: ["home2", "h1", "text"],
  h1: ["h1"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  home2: "section";
  h1: "h1";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    home2: makeNodeComponent("home2"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
